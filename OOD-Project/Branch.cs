///////////////////////////////////////////////////////////
//  Branch.cs
//  Implementation of the Class Branch
//  Generated by Enterprise Architect
//  Created on:      30-Nov-2023 11:11:02 AM
//  Original author: mohda
///////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Windows.Forms;

namespace OOD_Project
{
    public class Branch
    {

        private int branchId;
        private string branchName;
        private string phoneNumber;

        public Branch(int branchId, string branchName, string phoneNumber)
        {
            this.branchId = branchId;
            this.BranchName = branchName;
            this.phoneNumber = phoneNumber;
        }

        ~Branch()
        {

        }


        public int BranchId
        {
            get
            {
                return branchId;
            }
            set
            {
                branchId = value;
            }
        }



        public string PhoneNumber
        {
            get
            {
                return phoneNumber;
            }
            set
            {
                phoneNumber = value;
            }
        }

        public string BranchName { get => branchName; set => branchName = value; }

        public static bool DeleteBranch(int branch_id)
        {
            DatabaseManager dbm = DatabaseManager.Instance();
            dbm.Connection.Open();
            dbm.Command.Parameters.AddWithValue("@branch_id", branch_id);
            dbm.Command.CommandText = "DELETE FROM [dbo].[Branch] WHERE branch_id = @branch_id";
            try
            {
                dbm.Command.ExecuteNonQuery();
                return true;
            }
            catch (Exception ex)
            {
                return false;
            }
            finally
            {
                dbm.Command.Parameters.Clear();
                dbm.Connection.Close();
            }
        }

        public static void AddBranch(Branch branch)
        {
            DatabaseManager dbm = DatabaseManager.Instance();
            dbm.Connection.Open();
            dbm.Command.Parameters.AddWithValue("@branch_id", branch.branchId);
            dbm.Command.Parameters.AddWithValue("@name", branch.branchName);
            dbm.Command.Parameters.AddWithValue("@phone_number", branch.phoneNumber);

            dbm.Command.CommandText = "INSERT INTO [dbo].[Branch] (branch_id, name, phone_number) VALUES (@branch_id, @name, @phone_number)";
            

        }

        public static bool EditBranch(Branch branch)
        {
            DatabaseManager dbm = DatabaseManager.Instance();
            dbm.Connection.Open();

            dbm.Command.Parameters.AddWithValue("@branch_id", branch.branchId);
            dbm.Command.Parameters.AddWithValue("@name", branch.branchName);
            dbm.Command.Parameters.AddWithValue("@phone_number", branch.phoneNumber);

            dbm.Command.CommandText = "UPDATE [dbo].[Branch] SET name = @name, phone_number = @phone_number WHERE branch_id = @branch_id";
            try
            {
                dbm.Command.ExecuteNonQuery();
                return true;
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
                return false;
            }
            finally
            {
                dbm.Command.Parameters.Clear();
                dbm.Connection.Close();
            }
        }

    }//end Branch
}

