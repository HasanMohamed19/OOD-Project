///////////////////////////////////////////////////////////
//  Branch.cs
//  Implementation of the Class Branch
//  Generated by Enterprise Architect
//  Created on:      30-Nov-2023 11:11:02 AM
//  Original author: mohda
///////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Windows.Forms;
using static System.Windows.Forms.VisualStyles.VisualStyleElement.TreeView;
using System.Data.SqlClient;

namespace OOD_Project
{
    public class Branch
    {

        private int branchId;
        private string branchName;
        private string phoneNumber;

        public Branch(int branchId, string branchName, string phoneNumber)
        {
            this.branchId = branchId;
            this.BranchName = branchName;
            this.phoneNumber = phoneNumber;
        }

        ~Branch()
        {

        }


        public int BranchId
        {
            get
            {
                return branchId;
            }
            set
            {
                branchId = value;
            }
        }



        public string PhoneNumber
        {
            get
            {
                return phoneNumber;
            }
            set
            {
                phoneNumber = value;
            }
        }

        public string BranchName { get => branchName; set => branchName = value; }


        public static Branch GetBranchForTeacher(int teacher_id)
        {
            Branch branch = null;
            DatabaseManager dbm = DatabaseManager.Instance();
            dbm.Connection.Open();
            dbm.Command = dbm.Connection.CreateCommand();

            dbm.Command.Parameters.AddWithValue("@teacher_id", teacher_id);
            dbm.Command.CommandText = "SELECT * FROM [dbo].[branch] b " +
                "JOIN [dbo].[teacher] t ON t.branch_id = b.branch_id " +
                "WHERE teacher_id = @teacher_id ";
            try
            {
                dbm.Reader = dbm.Command.ExecuteReader();
                if (dbm.Reader.Read())
                {
                    int branchId = dbm.Reader.GetInt32(0);
                    string branchName = dbm.Reader.GetString(1);
                    string branchPhone = dbm.Reader.GetString(2);
                    branch = new Branch(branchId, branchName, branchPhone);
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }
            finally { dbm.Reader.Close(); dbm.Connection.Close(); }

            return branch;
        }

        public static Branch GetBranch(int branch_id)
        {
            Branch branch = null;
            DatabaseManager dbm = DatabaseManager.Instance();
            dbm.Connection.Open();
            dbm.Command = dbm.Connection.CreateCommand();

            dbm.Command.Parameters.AddWithValue("@branch_id", branch_id);
            dbm.Command.CommandText = "SELECT * FROM [dbo].[branch] " +
                "WHERE branch_id = @branch_id";
            try
            {
                dbm.Reader = dbm.Command.ExecuteReader();
                if (dbm.Reader.Read())
                {
                    int branchId = dbm.Reader.GetInt32(0);
                    string branchName = dbm.Reader.GetString(1);
                    string branchPhone = dbm.Reader.GetString(2);
                    branch = new Branch(branchId, branchName, branchPhone);
                }
            } catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            } finally { 
                dbm.Command.Parameters.Clear();
                dbm.Reader.Close(); 
                dbm.Connection.Close(); 
            }
            
            return branch;
        }

        // returns all branches
        public static List<Branch> GetBranches()
        {
            var branches = new List<Branch>();
            DatabaseManager dbm = DatabaseManager.Instance();
            dbm.Connection.Open();
            dbm.Command = dbm.Connection.CreateCommand();

            dbm.Command.CommandText = "SELECT * FROM [dbo].[branch]";

            dbm.Reader = dbm.Command.ExecuteReader();
            while (dbm.Reader.Read())
            {
                int branchId = dbm.Reader.GetInt32(0);
                string branchName = dbm.Reader.GetString(1);
                string branchPhone = dbm.Reader.GetString(2);
                branches.Add(new Branch(branchId, branchName, branchPhone));
            }
            dbm.Connection.Close();
            return branches;
        }
        public static bool DeleteBranch(int branch_id)
        {
            DatabaseManager dbm = DatabaseManager.Instance();
            dbm.Connection.Open();
            dbm.Command = dbm.Connection.CreateCommand();
            dbm.Command.Parameters.AddWithValue("@branch_id", branch_id);
            dbm.Command.CommandText = "DELETE FROM [dbo].[Branch] WHERE branch_id = @branch_id";
            try
            {
                dbm.Command.ExecuteNonQuery();
                return true;
            } catch (SqlException e) when (e.Number == 547)
            {
                MessageBox.Show("Cannot delete branch because at least one teacher is under it. Please remove the teachers and try again.", "Branch Not Deleted");
                return false;
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
                return false;
            }
            finally
            {
                dbm.Command.Parameters.Clear();
                dbm.Connection.Close();
            }
        }

        public static bool AddBranch(Branch branch)
        {
            DatabaseManager dbm = DatabaseManager.Instance();
            dbm.Connection.Open();
            dbm.Command = dbm.Connection.CreateCommand();
            dbm.Command.Parameters.AddWithValue("@name", branch.branchName);
            dbm.Command.Parameters.AddWithValue("@phone_number", branch.phoneNumber);

            dbm.Command.CommandText = "INSERT INTO [dbo].[Branch] (branch_id, name, phone_number) VALUES (NEXT VALUE FOR [dbo].[branchIDSequence], @name, @phone_number)";
            try
            {
                dbm.Command.ExecuteNonQuery();
                return true;
            } catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
                return false;
            } finally
            {
                dbm.Command.Parameters.Clear();
                dbm.Connection.Close();
            }

        }

        public static bool EditBranch(Branch branch)
        {
            DatabaseManager dbm = DatabaseManager.Instance();
            dbm.Connection.Open();
            dbm.Command = dbm.Connection.CreateCommand();

            dbm.Command.Parameters.AddWithValue("@branch_id", branch.branchId);
            dbm.Command.Parameters.AddWithValue("@name", branch.branchName);
            dbm.Command.Parameters.AddWithValue("@phone_number", branch.phoneNumber);

            dbm.Command.CommandText = "UPDATE [dbo].[Branch] SET name = @name, phone_number = @phone_number WHERE branch_id = @branch_id";
            try
            {
                dbm.Command.ExecuteNonQuery();
                return true;
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
                return false;
            }
            finally
            {
                dbm.Command.Parameters.Clear();
                dbm.Connection.Close();
            }
        }

    }//end Branch
}

