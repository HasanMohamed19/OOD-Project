<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAAMMOAADDDgAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        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
        HveZWx7/mFoc/5lbHv+kazL/vJBf/9e4kP/gx6P/0bCH/7aGU/+eYyj/mVse/5lbHv+ZWx7/mVse/5lb
        Hv+ZWx7/mVse/5lbHv+ZWx73mVse0JlbHouZWx5CmVseEplbHgGZWx4AmVseAJlbHgmZWx5tmVse2Jlb
        Hv6ZWx7/mVse/5lbHv+ZWx7/mVse/5haHf+XWBv/mlwg/6dxOf/BmGn/2byV/7ODT/+YWRz/mVse/5lb
        Hv+ZWx7/mVse/5lbHv+ZWx7/mVse/5lbHv+ZWx7/mVse/plbHtmZWx5umVseCZlbHgCZWx4AmVseAJlb
        HgiZWx4pmVsea5lbHreZWx7smVse/5lbHv+ZWx7/mVse/5lbHv+ZWx7/mFoc/5dZG/+bXiL/m14i/5lb
        Hv+ZWx7/mVse/5lbHv+ZWx7/mVse/5lbHv+ZWx7/mVse7JlbHreZWx5smVseKplbHgiZWx4AmVseAAAA
        AAAAAAAAAAAAAJlbHgCZWx4AmVseCZlbHjOZWx56mVsew5lbHvKZWx7/mVse/5lbHv+ZWx7/mVse/5lb
        Hv+ZWx7/mVse/5lbHv+ZWx7/mVse/5lbHv+ZWx7zmVsexJlbHnuZWx4zmVseCZlbHgCZWx4AAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAmVseAJlTHgCZWx4OmVseP5lbHomZWx7PmVse95lb
        Hv+ZWx7/mVse/5lbHv+ZWx7/mVse/5lbHveZWx7PmVseiZlbHj+ZWx4OmV4YAJlbHgAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACZWx4AmVseAZlb
        HhWZWx5LmVsel5lbHtmZWx77mVse+5lbHtqZWx6YmVseTJlbHhWZWx4BmVseAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAJlbHgCZWx4CmVseHJlbHleZWx5YmVseHZlbHgKZWx4AAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA/////////////////////////////////h////4ef//+AAP//gAA//wA
        AD/4AAAf+AAAH/gAAB/8AAA//AAAP/wAAD/+AAB/8AAAD4AAAAGAAAABwAAAA/gAAB//AAD//8AD///4
        H/////////////////////////////////8=
</value>
  </data>
</root>